import probs
import immutable/list

def linearRegression(observations: List[(Double, Double)]) = {
  val m = do Sample(Gaussian(0.0, 3.0))
  val c = do Sample(Gaussian(0.0, 2.0))

  observations.foreach {
    case (x,y) => do Observe(y, Gaussian((m * x + c), 1.0))
  }

  return (m, c)
}

def main() = {
  val start = timestamp()
  // testing of linear regression for m= 1, c = 0
  repeat(5){
    val result = handleRandom{
      handleRejection{
        handleSample{
          handleObserve{
            linearRegression([(5.0, 5.0), (1.0, 1.0), (-2.0, -2.0), (3.0, 3.0), (20.0, 20.0), (5.0, 5.0)])
          }
        }
      }
    }
  
    println(result)
  }
  val t0 = timestamp()
  println(t0 - start)

  //possible only with rejection sampling because rs is just handlers not full algorithm
  println("\nin rejection Sampling")
  rejectionSampling[(Double, Double)](5){
    linearRegression([(5.0, 5.0), (1.0, 1.0), (-2.0, -2.0), (3.0, 3.0), (20.0, 20.0), (5.0, 5.0)])
  }

  val t1 = timestamp()
  println(t1 - t0)
}