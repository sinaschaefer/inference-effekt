import probs
import immutable/list

//population so that number of s + i + r = 1
record Population(susceptible: Double, infected: Double, recovered: Double)

//multiply s,i,r parts of population with transition probabilitys to get new state of population
def progression(p: Population): Population / {Sample} = {
  p match {
    case Population(s, i, r) =>
      val noise = do Sample(Gaussian(0.0, 0.01))
      val s1 = 0.5 * s - noise
      val i1 = 0.3 * i + 0.5 * s + 0.1 * r + noise
      val r1 =  0.9 * r + 0.7 * i
      return Population(s1, i1, r1)
  }
}

//testing the popultaion(like covid test)
def test(p: Population, pr: Double): Unit / Observe = {
  p match {
    case Population(s, i, r) =>
      val mean = i 
      val sampleSize = 100.0
      do Observe(pr, Beta(mean, sampleSize))
  }
}

//approximate next state of population based on current state
def step(p0: Population, pr1: Double): Population / {Sample, Observe} = {
  val p1 = progression(p0)
  test(p1, pr1)
  return p1
}

def main() = {
  val start = timestamp()

  //dummy aufruf fÃ¼r timestamps
  rejectionSampling(1){
    step(Population(0.8, 0.1, 0.1), 0.5)
  }
  val t = timestamp()
  println("\n")
  
  //rejection Sampling
  println("testing with rejection Sampling")
  rejectionSampling[Population](5){
    val init = Population(0.7, 0.2, 0.1)
    step(init, 0.5)
  }
  val t0 = timestamp()
  println(t0 - t)
  println("\n")

  rejectionSampling[List[Population]](1){
    var nextPop = Population(0.7, 0.2, 0.1)
    var nextpr = 0.3
    var m = 5
    var path : List[Population] = [nextPop]

    while(m > 0){
      nextPop = step(nextPop, nextpr)
    
      val noise = do Sample(Gaussian(0.0, 0.01))
      var nextpr1 = nextpr + noise
      if(not(nextpr1 < 0.0 || nextpr1 > 1.0)){nextpr = nextpr1}

      path = append(path, [nextPop])
      m = m - 1
    }
    return path
  }

  val t1 = timestamp()
  println(t1 -t0)
  println("\n")

  //slice sampling
  println("testing with slice Sampling")
  sliceSampling[Population](5){
    val init = Population(0.7, 0.2, 0.1)
    step(init, 0.5)
  }
  val t2 = timestamp()
  println(t2 - t1)
  println("\n")

  sliceSampling[List[Population]](1){
    var nextPop = Population(0.7, 0.2, 0.1)
    var nextpr = 0.8
    var m = 5
    var path : List[Population] = [nextPop]

    while(m > 0){
      nextPop = step(nextPop, nextpr)
      val noise = do Sample(Gaussian(0.0, 0.01))
      var nextpr1 = nextpr + noise
      if(not(nextpr1 < 0.0 || nextpr1 > 1.0)){nextpr = nextpr1}

      path = append(path, [nextPop])
      m = m - 1
    }
    return path
  }
  val t3 = timestamp()
  println(t3 - t2)

  //metropolis-hastings
  println("\ntesting with Metropolis Hastings")
  metropolisHastings[Population](5){
    val init = Population(0.7, 0.2, 0.1)
    step(init, 0.8)
  }
  val t4 = timestamp()
  println(t4 - t3)
  println("\n")

  metropolisHastings[List[Population]](1){
    var nextPop = Population(0.7, 0.2, 0.1)
    var nextpr = 0.8
    var m = 5
    var path : List[Population] = [nextPop]

    while(m > 0){
      nextPop = step(nextPop, nextpr)
      val noise = do Sample(Gaussian(0.0, 0.01))
      var nextpr1 = nextpr + noise
      if(not(nextpr1 < 0.0 || nextpr1 > 1.0)){nextpr = nextpr1}

      path = append(path, [nextPop])
      m = m - 1
    }
    return path
  }
  val t5 = timestamp()
  println(t5 - t4)

  //metropolis-hastings single site
  println("\ntesting with metropolis Hastings Single Site")
  metropolisHastings[Population](5){
    val init = Population(0.7, 0.2, 0.1)
    step(init, 0.8)
  }
  val t6 = timestamp()
  println(t6 - t5)
  println("\n")

  metropolisHastingsSingleSite[List[Population]](1){
    var nextPop = Population(0.7, 0.2, 0.1)
    var nextpr = 0.8
    var m = 5
    var path : List[Population] = [nextPop]

    while(m > 0){
      nextPop = step(nextPop, nextpr)
      val noise = do Sample(Gaussian(0.0, 0.01))
      var nextpr1 = nextpr + noise
      if(not(nextpr1 < 0.0 || nextpr1 > 1.0)){nextpr = nextpr1}

      path = append(path, [nextPop])
      m = m - 1
    }
    return path
  }
  val t7 = timestamp()
  println(t7 - t6)
}